# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
#   branches:
#     include:
#       - main
#       - hotfix*
#   tags:
#     include:
#       - '*'
trigger: none
pr: none

variables:
  isMain: $[eq(variables['Build.SourceBranchName'], 'main')]
  isHotfix: $[startsWith(variables['Build.SourceBranchName'], 'hotfix')]
  isCandidate: $[startsWith(variables['Build.SourceBranchName'], 'rc-')]
  isRelease: $[startsWith(variables['Build.SourceBranchName'], 'v')]

# Had an option of choosing between stages and Jobs, its not a neccesity to use stages, just my choice
# I just used stages to group jobs together, for e.g: we have 2 sandbox envs, so both deployment jobs are in deploy_sand stage.
# We can easily switch back to jobs if we want.

jobs:
  - job: build
    displayName: 'Build Project'
    condition: or(eq(variables.isMain,true),eq(variables.isHotfix,true))
    pool: 'Default'  #Replace by build agent pool / dev
    steps:
      - task: Bash@3
        name: set_env
        displayName: 'Set Env'
        inputs:
          targetType: inline
          script: |
            GIT_SHA=$(git rev-parse --short HEAD)
            echo "##vso[task.setvariable variable=sha]$GIT_SHA"
            echo $GIT_SHA
            GIT_TAG=$(git tag --points-at HEAD)
            echo "##vso[task.setvariable variable=tag]$GIT_TAG"
            echo $GIT_TAG
            echo "##vso[task.setvariable variable=image]$(Build.Repository.Name)"
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "docker build steps.."
            echo "image tag: $(image):$(sha)"
            echo "docker push DEV_ACR/$(image)"
  - deployment: dev_deploy
    displayName: 'Deploy to dev env'
    condition: eq(variables.isMain,true)
    dependsOn: 'build'
    pool: 'Default' #Replace with Dev Agent pool
    environment: development
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              name: set_env
              displayName: 'Set Env'
              inputs:
                targetType: inline
                script: |
                  GIT_SHA=$(git rev-parse --short HEAD)
                  echo "##vso[task.setvariable variable=sha]$GIT_SHA"
                  echo $GIT_SHA
                  GIT_TAG=$(git tag --points-at HEAD)
                  echo "##vso[task.setvariable variable=tag]$GIT_TAG"
                  echo $GIT_TAG
                  echo "##vso[task.setvariable variable=image]$(Build.Repository.Name)"
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  echo "container app dev deployment with DEV_ACR/$(image):$(tag)"
  - deployment: sand_US_deploy
    displayName: 'Deploy to US sandbox env'
    condition: startsWith(variables['Build.SourceBranchName'], 'rc-')
    pool: 'Default' #Replace With Sandbox US pool
    environment: 'sandbox_US'
    strategy:
     runOnce:
       deploy:
        steps:
        - task: Bash@3
          name: set_env
          displayName: 'Set Env'
          inputs:
            targetType: inline
            script: |
              GIT_SHA=$(git rev-parse --short HEAD)
              echo "##vso[task.setvariable variable=sha]$GIT_SHA"
              echo $GIT_SHA
              GIT_TAG=$(git tag --points-at HEAD)
              echo "##vso[task.setvariable variable=tag]$GIT_TAG"
              echo $GIT_TAG
              echo "##vso[task.setvariable variable=image]$(Build.Repository.Name)"
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              echo "docker pull $(image):$(sha)"
              echo "docker tag $(image):$(sha) $(image):$(tag)"
              echo "docker push SAND_ACR/$(image):$(tag)"
              echo "container app dev deployment with SAND_ACR/$(image):$(tag)"
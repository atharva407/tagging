# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
#   branches:
#     include:
#       - main
#       - hotfix*
#   tags:
#     include:
#       - '*'
trigger: none
pr: none

variables:
  isMain: $[eq(variables['Build.SourceBranchName'], 'main')]
  isHotfix: $[startsWith(variables['Build.SourceBranchName'], 'hotfix')]
  isCandidate: $[startsWith(variables['Build.SourceBranchName'], 'rc-')]
  isRelease: $[startsWith(variables['Build.SourceBranchName'], 'v')]
  IMAGE: $(Build.Repository.Name)
stages:
- stage: setup
  displayName: Setup pipeline variables
  jobs:
    - job: init
      displayName: Initialize variables
      pool: 'Default'
      steps:
      - script: |
          echo "isMain : $(isMain)"
          echo "isHotfix: $(isHotfix)"
          echo "isCandidate : $(isCandidate)"
          echo "isRelease: $(isRelease)"
      - task: Bash@3
        name: set_env
        displayName: 'Set Env'
        inputs:
          targetType: inline
          script: |
            GIT_SHA=$(git rev-parse --short HEAD)
            echo "##vso[task.setvariable variable=sha;isOutput=true]$GIT_SHA"
            echo $GIT_SHA
            GIT_TAG=$(git tag --points-at HEAD)
            echo "##vso[task.setvariable variable=tag;isOutput=true]$GIT_TAG"
            echo $GIT_TAG
- stage: build
  condition: or(eq(variables.isMain,true),eq(variables.isHotfix,true))
  variables:
    GIT_SHA: $[ stageDependencies.setup.init.outputs['set_env.sha'] ]
    GIT_TAG: $[ stageDependencies.setup.init.outputs['set_env.tag'] ]
  jobs:
  - job: Build
    pool: 'Default'
    steps:
    - script: |
        echo "Building code for $(GIT_SHA)"
        echo "image name: $(IMAGE):$(GIT_SHA)"
        echo $(GIT_SHA)
        echo $(GIT_TAG)
      displayName: 'Build'

- stage: deploy_dev
  condition: eq(variables.isMain,true)
  dependsOn: [ build , setup ]
  jobs:
  - deployment:
    pool: 'Default' #Replace with Dev Agent pool
    environment: development
    displayName: 'Deploy to dev'
    variables:
      GIT_SHA: $[ stageDependencies.setup.init.outputs['set_env.sha'] ]
      GIT_TAG: $[ stageDependencies.setup.init.outputs['set_env.tag'] ]
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  echo "container app dev deployment with DEV_ACR/$(IMAGE):$(GIT_SHA)"
- stage: deploy_sand
  condition: eq(variables.isCandidate,true)
  dependsOn: setup
  displayName: 'Deploy to sand'
  variables:
      GIT_SHA: $[ stageDependencies.setup.init.outputs['set_env.sha'] ]
      GIT_TAG: $[ stageDependencies.setup.init.outputs['set_env.tag'] ]
  jobs:
  - deployment:
    pool: 'Default' #Replace with Sand US Agent pool
    environment: sandbox_US
    displayName: 'Deploy to sand US'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  echo "docker pull $(IMAGE):$(GIT_SHA)"
                  echo "docker tag $(IMAGE):$(GIT_SHA) $(IMAGE):$(GIT_TAG)"
                  echo "docker push SAND_ACR/$(IMAGE):$(GIT_TAG)"
                  echo "container app dev deployment with SAND_ACR/$(IMAGE):$(GIT_SHA)"
  - deployment:
    pool: 'Default' #Replace with Sand UK Agent pool
    environment: sandbox_UK
    displayName: 'Deploy to sand UK'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  echo "docker pull $(IMAGE):$(GIT_SHA)"
                  echo "docker tag $(IMAGE):$(GIT_SHA) $(IMAGE):$(GIT_TAG)"
                  echo "docker push SAND_ACR/$(IMAGE):$(GIT_TAG)"
                  echo "container app sand deployment with SAND_UK_ACR/$(IMAGE):$(GIT_SHA)"

- stage: deploy_prod
  condition: eq(variables.isRelease,true)
  dependsOn: setup
  displayName: 'Deploy to Prod'
  variables:
      GIT_SHA: $[ stageDependencies.build.init.outputs['set_env.sha'] ]
      GIT_TAG: $[ stageDependencies.build.init.outputs['set_env.tag'] ]
  jobs:
  - deployment:
    pool: 'Default' #Replace with Dev Agent pool
    environment: production
    displayName: 'Deploy to prod'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  echo "docker pull $(IMAGE):$(GIT_SHA)"
                  echo "docker tag $(IMAGE):$(GIT_SHA) $(IMAGE):$(GIT_TAG)"
                  echo "docker push SAND_ACR/$(IMAGE):$(GIT_TAG)"
                  echo "container app prod deployment with PROD_ACR/$(IMAGE):$(GIT_SHA)"
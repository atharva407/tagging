# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
      - hotfix*
  tags:
    include:
      - '*'
pr: none

variables:
  isMain: $[eq(variables['Build.SourceBranchName'], 'main')]
  isHotfix: $[startsWith(variables['Build.SourceBranchName'], 'hotfix')]
  isCandidate: $[startsWith(variables['Build.SourceBranchName'], 'rc-')]
  isRelease: $[startsWith(variables['Build.SourceBranchName'], 'v')]

# Had an option of choosing between stages and Jobs, its not a neccesity to use stages, just my choice
# I just used stages to group jobs together, for e.g: we have 2 sandbox envs, so both deployment jobs are in deploy_sand stage.
# We can easily switch back to jobs if we want.

jobs:
  - job: init
    displayName: 'Initialize Variables'
    pool: Default #Can be any pool
    steps:
    - script: |
        echo "isMain : $(isMain)"
        echo "isHotfix: $(isHotfix)"
        echo "isCandidate : $(isCandidate)"
        echo "isRelease: $(isRelease)"
    - task: Bash@3
      name: set_env
      displayName: 'Set Env'
      inputs:
        targetType: inline
        script: |
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "##vso[task.setvariable variable=sha;isOutput=true]$GIT_SHA"
          echo $GIT_SHA
          GIT_TAG=$(git tag --points-at HEAD)
          echo "##vso[task.setvariable variable=tag;isOutput=true]$GIT_TAG"
          echo $GIT_TAG
          echo "##vso[task.setvariable variable=image;isOutput=true]$(Build.Repository.Name)"
  - job: build
    displayName: 'Build Project'
    dependsOn: 'init'
    variables:
      GIT_SHA: $[ dependencies.Initialize.outputs['set_env.sha'] ]
      GIT_TAG: $[ dependencies.Initialize.outputs['set_env.tag'] ]
      IMAGE: $[dependencies.Initialize.outputs['set_env.image']]
    pool: 'Default'  #Replace by build agent pool / dev
    steps:
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "docker build steps.."
            echo "image tag: $(IMAGE):$(GIT_SHA)"
            echo "docker push DEV_ACR/$(IMAGE)"
  - deployment: dev_deploy
    displayName: 'Deploy to dev env'
    dependsOn: 'build'
    pool: 'Default' #Replace with Dev Agent pool
    environment: development
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  echo "container app dev deployment with DEV_ACR/$(IMAGE):$(GIT_SHA)"
  - deployment: sand_US_deploy
    displayName: 'Deploy to US sandbox env'
    variables:
      GIT_SHA: $[ dependencies.Initialize.outputs['set_env.sha'] ]
      GIT_TAG: $[ dependencies.Initialize.outputs['set_env.tag'] ]
      IMAGE: $[dependencies.Initialize.outputs['set_env.image']]
    dependsOn: 'init'
    pool: 'Default' #Replace With Sandbox US pool
    environment: 'sandbox_US'
    strategy:
     runOnce:
       deploy:
        steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              echo "docker pull $(IMAGE):$(GIT_SHA)"
              echo "docker tag $(IMAGE):$(GIT_SHA) $(IMAGE):$(GIT_TAG)"
              echo "docker push SAND_ACR/$(IMAGE):$(GIT_TAG)"
              echo "container app dev deployment with SAND_ACR/$(IMAGE):$(GIT_SHA)"
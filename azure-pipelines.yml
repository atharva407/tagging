# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
      - hotfix*
  tags:
    include:
      - '*'
pr: none

variables:
  isMain: $[eq(variables['Build.SourceBranchName'], 'main')]
  isHotfix: $[startsWith(variables['Build.SourceBranchName'], 'hotfix')]
  isCandidate: $[startsWith(variables['Build.SourceBranchName'], 'rc-')]
  isRelease: $[startsWith(variables['Build.SourceBranchName'], 'v')]
  IMAGE: $(Build.Repository.Name)
stages:
# Had an option of choosing between stages and Jobs, its not a neccesity to use stages, just my choice
# I just used stages to group jobs together, for e.g: we have 2 sandbox envs, so both deployment jobs are in deploy_sand stage.
# We can easily switch back to jobs if we want.

- stage: build
  pool: Default
  jobs: 
  - job: Initialize
    steps:
    - script: |
        echo "isMain : $(isMain)"
        echo "isHotfix: $(isHotfix)"
        echo "isCandidate : $(isCandidate)"
        echo "isRelease: $(isRelease)"
    - task: Bash@3
      name: set_env
      displayName: 'Set Env'
      inputs:
        targetType: inline
        script: |
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "##vso[task.setvariable variable=sha;isOutput=true]$GIT_SHA"
          echo $GIT_SHA
          GIT_TAG=$(git tag --points-at HEAD)
          echo "##vso[task.setvariable variable=tag;isOutput=true]$GIT_TAG"
          echo $GIT_TAG
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          echo $sha
          echo $tag
          echo $(sha)
          echo $(tag)
  - job: Build
    dependsOn: Initialize
    condition: or(eq(variables.isMain,true),eq(variables.isHotfix,true))
    variables:
      GIT_SHA: $[ dependencies.Initialize.outputs['set_env.sha'] ]
      GIT_TAG: $[ dependencies.Initialize.outputs['set_env.tag'] ]
    steps:
    - script: |
        echo "Building code for $(GIT_SHA)"
        echo "image name: $(IMAGE):$(GIT_SHA)"
        echo $(GIT_SHA)
        echo $(GIT_TAG)
      displayName: 'Build'
